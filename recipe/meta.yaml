{% set name = "librealsense" %}
{% set version = "2.56.5" %}
{% set cuda_enabled = cuda_compiler_version != "None" %}
{% set build_ext = "cuda" if cuda_enabled else "cpu" %}
{% set PY_VER_MAJOR = PY_VER.split('.')[0] %}
{% set PY_VER_MINOR = PY_VER.split('.')[1] %}
{% set build = 0 %}

# Order of priority:
# CUDA 12
# cpu
# CUDA 11
# see https://github.com/conda-forge/librealsense-feedstock/issues/41
{% if (cuda_compiler_version or "").startswith("12") %}
{% set build = build + 200 %}
{% endif %}

{% if cuda_compiler_version == "None" %}
{% set build = build + 100 %}
{% endif %}


package:
  name: {{ name }}
  version: {{ version }}

source:
  - url: https://github.com/IntelRealSense/librealsense/archive/v{{ version }}.tar.gz
    sha256: 58b2029eb7179afc7ea893c25be38a65b42c5b6d27330c8c611bc0e0a4ac5a85
    patches:
      - drop_additional_flags.patch
      - do_not_run_ldconfig_on_install.patch
      - devendor_pybind11.patch
      - fix_pyd_windows_install.patch

build:
  number: {{ build }}
  string: py{{ PY_VER_MAJOR }}{{ PY_VER_MINOR }}h{{ PKG_HASH }}_{{ PKG_BUILDNUM }}_{{ build_ext }}
  skip: true  # [ppc64le and (cuda_compiler_version or "").startswith("12")]
  ignore_run_exports_from:
    - python
  run_exports:
    # See https://github.com/IntelRealSense/librealsense/pull/3449
    - {{ pin_subpackage(name, max_pin='x.x') }}

requirements:
  build:
    - python                                 # [build_platform != target_platform]
    - cross-python_{{ target_platform }}     # [build_platform != target_platform]
    - {{ compiler('c') }}
    - {{ stdlib("c") }}
    - {{ compiler('cxx') }}
    - {{ compiler("cuda") }}  # [cuda_compiler_version != "None"]
    - cmake <4
    - ninja
    - libudev  # [linux]
  host:
    - python
    - libudev  # [linux]
    - libusb
    - pybind11
    - pybind11-abi
    - nlohmann_json
    - pybind11_json
    - cuda-version {{ cuda_compiler_version }}  # [(cuda_compiler_version or "None") != "None"]
    - cuda-cudart-dev  # [(cuda_compiler_version or "").startswith("12")]
  run:
    - __cuda  # [cuda_compiler_version != "None"]


outputs:
  - name: librealsense
    test:
      commands:
        - test -f ${PREFIX}/include/librealsense2/rs.hpp  # [not win]
        - test -f ${PREFIX}/lib/librealsense2.so  # [linux]
        - test -f ${PREFIX}/lib/librealsense2.dylib  # [osx]
        - test -f ${PREFIX}/lib/cmake/realsense2/realsense2Config.cmake  # [not win]
        - if exist %PREFIX%\\Library\\include\\librealsense2\\rs.hpp (exit 0) else (exit 1)  # [win]
        - if exist $PREFIX$\\Library\\lib\\realsense2.lib (exit 0) else (exit 1)  # [win]
        - if exist $PREFIX$\\Library\\bin\\realsense2.dll (exit 0) else (exit 1)  # [win]
        - if exist %PREFIX%\\Library\\lib\cmake\\realsense2\\realsense2Config.cmake (exit 0) else (exit 1)  # [win]

  - name: pyrealsense2
    build:
      string: py{{ PY_VER_MAJOR }}{{ PY_VER_MINOR }}h{{ PKG_HASH }}_{{ PKG_BUILDNUM }}_{{ build_ext }}
    requirements:
      # There is no build script, but I just want it to think
      # that it needs python and numpy at build time
      host:
        - python
        - numpy
      run:
        - python
        - {{ pin_subpackage('librealsense', exact=True) }}
    test:
      imports:
        - pyrealsense2

about:
  home: https://github.com/IntelRealSense/librealsense
  license: Apache-2.0
  license_file: LICENSE
  summary: Cross-platform library for Intel® RealSense™ depth and tracking cameras.
  description: |
    This feedstock packages the C++ library `librealsense` and the Python library `pyrealsense2`. 
    The packages are built enabling the `FORCE_RSUSB_BACKEND` CMake option, and they are available for all the Linux and macOS platforms supported by conda-forge, including `linux-aarch64` that can be used on Nvidia Jetson boards.
    If your platform is `cuda` capable, a `cuda` enabled package should be installed automatically. If that does not happen, you can force the installation of the `cuda` variant with `conda create -n rsenv librealsense=*=*cuda*` or the 
    command in your preferred conda-based package manager. If for any reason you want to force the installation of librealsense without cuda support, you can do that with `conda create -n rsenv  librealsense=*=*cpu*`.
extra:
  recipe-maintainers:
    - traversaro
